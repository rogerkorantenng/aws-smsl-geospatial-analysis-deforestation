# -*- coding: utf-8 -*-
"""geospatial_analysis_deforestation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13AdB3ikZ1Jb6kI-yRh3ajdIhD1ClQUAb

##Getting Started With Geospatial Data Analysis Forest Cut Temporal Detection.

This notebook covers the basics of getting started with Geospatial Data Analysis on SageMaker Studio Labs. We start with exploring the sentinel geospatial dataset available at AWS open data registry. We explore deforestation data by analyzing [Sentinel-2](https://registry.opendata.aws/sentinel-2/) geospatial data and calculating spectral indices. Below is the example of Paradise fire in 2018. Similar concept will be used to identified Forest Cut Temporal Detection.

##Install Packages (Optional)

Creating a environment in Studio Lab is easy, just select the environment.yml file (by cloning this repository or upload it directly), right click the YAML file and select create environment. Once the environment is created, you should open this notbook with the newly created kernel. Optionally you can also uncomment the package installation section of the notebook to install these packages manually.
"""

%pip install pandas
%pip install numpy
%pip install geopandas
%pip install shapely
%pip install matplotlib
%pip install plotly_express
%pip install sentinelhub
%pip install rasterio
%pip install earthpyname: geo-data
%pip install utils

"""##Import Packages

After the environment is created and selected or the packages installed manually, we can import them directly.
"""

import pandas as pd
import numpy as np
import geopandas as gpd
from shapely.geometry import Point
import matplotlib
import matplotlib.pyplot as plt 
import folium
import plotly_express as px
import os
import warnings
import datetime
warnings.filterwarnings('ignore')

"""##Working With Geospatial Images

For Geospatial data, we will use Sentinel-2. The [Sentinel-2 mission](https://sentinel.esa.int/web/sentinel/missions/sentinel-2) is a land monitoring constellation of two satellites that provide high resolution optical imagery and continuity for the current SPOT and Landsat missions. The Sentinel-2 dataset is available publicly at the [AWS open data registry](https://registry.opendata.aws/sentinel-2/).

We will use the [sentinelhub python package](https://sentinelhub-py.readthedocs.io/en/latest/), that makes it easy to search and download data specific to our focus area directly from AWS.
"""

from sentinelhub import (
    MimeType,
    CRS,
    BBox,
    SentinelHubRequest,
    SentinelHubDownloadClient,
    DataCollection,
    bbox_to_dimensions,
    DownloadRequest
)

"""##Sentinel Hub Setup

This section shows how to configure your credentials for sentinelhub. We are using a optional json file to store and retrieve credentials.

We need Setinelhub instance_id and AWS Key and Access ID as requester pays the transfer fees.
"""

from sentinelhub import SHConfig
config = SHConfig()

import json

with open("config.json") as json_data_file:
    cfg = json.load(json_data_file)

# instance_id - Instance ID from from your Sentinel Hub account 
config.instance_id = cfg["sentinelhub"]["instance_id"]

config.aws_access_key_id = cfg["aws"]["AKIAXX75NIOLGWKP2AVS"]
config.aws_secret_access_key = cfg["aws"]["guZE4YI3KWr1Cvjb3yZic6TaOzknrlfY1yr9ymeh"]

config.save()

# Verify credentials

from sentinelhub import WebFeatureService, BBox, CRS, DataCollection, SHConfig
if config.instance_id == '':
    print("Warning! To use WFS functionality, please configure the `instance_id`.")

"""##Data Search

Before we download, we need to specify our search coordinates that we want to study and the time window. In our case we are focusing on the Paradise, CA region, which we specify as a bounding box and a random time period.
"""

# Specify bounding box and time interval for search

#california paradise after fire
search_bbox = BBox(bbox=[-121.666536,39.708771,-121.542266,39.792182],crs=CRS.WGS84)
#before fire
search_time_interval = ('2018-11-01T00:00:00', '2018-11-01T23:59:59')
#after fire
#search_time_interval = ('2019-01-10T00:00:00', '2019-01-10T23:59:59')

wfs_iterator = WebFeatureService(
    search_bbox,
    search_time_interval,
    data_collection=DataCollection.SENTINEL2_L1C,
    maxcc=1.0,
    config=config
)

for tile_info in wfs_iterator:
    print(tile_info)

# List available tiles
wfs_iterator.get_tiles()

"""##Picking Tiles

For best results, we pick a tile with least cloud coverage. for this demo I am picking dates November 2018 (before fire) and November 2019 (after fire)
"""

from sentinelhub import AwsTile

tile_id = 'S2A_OPER_MSI_L1C_TL_MPS__20181104T100109_A017556_T10TFK_N02.06'
tile_name, time, aws_index = AwsTile.tile_id_to_tile(tile_id)
tile_name, time, aws_index




tile_id2 = 'S2A_OPER_MSI_L1C_TL_SGS__20190110T204028_A018557_T10TFK_N02.07'
tile_name2, time2, aws_index2 = AwsTile.tile_id_to_tile(tile_id2)
tile_name2, time2, aws_index2

"""##Sentinel Data Download

The Sentinel-2 satellites each carry a single multi-spectral instrument (MSI) with 13 spectral channels in the visible/near infrared (VNIR) and short wave infrared spectral range (SWIR). You can read more about these bands [here](https://en.wikipedia.org/wiki/Sentinel-2#Spectral_bands). For our example will download eight specific bands that will aid our analysis.
"""

warnings.simplefilter("ignore", UserWarning)
from sentinelhub import AwsTileRequest

bands = ['B01','B02','B03','B04','B07','B08','B8A', 'B10','B11','B12']
metafiles = ['tileInfo', 'preview', 'qi/MSK_CLOUDS_B00']
data_folder = './AwsData'


request = AwsTileRequest(
    tile=tile_name,
    time=time,
    aws_index=aws_index,
    bands=bands,
    metafiles=metafiles,
    data_folder=data_folder,
    data_collection=DataCollection.SENTINEL2_L1C
)

request.save_data()

"""Creating two different request to get two images for comparison."""

request2 = AwsTileRequest(
    tile=tile_name2,
    time=time2,
    aws_index=aws_index2,
    bands=bands,
    metafiles=metafiles,
    data_folder=data_folder,
    data_collection=DataCollection.SENTINEL2_L1C
)

request2.save_data()

"""we have not get the data yet - we create the request object. get_data will actually download the images and different spectrum data."""

#Parse the request response 

data_list = request.get_data(redownload=True)

p_b01,p_b02,p_b03,p_b04,p_b07,p_b08,p_b8a,p_b10,p_b11,p_b12,p_tile_info, p_preview, p_cloud_mask = data_list

data_list2 = request2.get_data(redownload=True)

p_b01_2,p_b02_2,p_b03_2,p_b04_2,p_b07_2,p_b08_2,p_b8a_2,p_b10_2,p_b11_2,p_b12_2,p_tile_info_2, p_preview_2, p_cloud_mask_2 = data_list2

"""Visualize Raw Data Along with the spectral bands, Sentinel tiles also include a preview image, let's check that out first to make sure we have the area of interest captured clearly."""

# Preview 

plt.figure(figsize = (48,12))
f, axarr = plt.subplots(1,2,figsize = (24,12));
axarr[0].imshow(p_preview,aspect='auto');
axarr[1].imshow(p_preview_2,aspect='auto');

"""##Working with Raster Data

Geospatial data is essentially comprised of raster data or vector data. Sentinel-2 uses GeoTIFF, a gridded raster datasets for satellite imagery and terrain models. [Rasterio is a Python library](https://rasterio.readthedocs.io/en/latest/) that allows to read, inspect, visualize and write geospatial raster data. Here we use rasterio to read thee raster arrays and then use this data to create a true color image.
"""

import rasterio
from rasterio import plot

"""For getting to the true color images, we will need the blue, green, red and NIR bands."""

#changing the time variable to two digit of month and day due to folder creation accordigly 
timesplit = time.split("-")
newtime=''
for splitedval in timesplit:
    if len(newtime) > 0:
        newtime += "-"
    if len(splitedval) == 1:
        splitedval = '%02d' % int(splitedval)
        #print(splitedval)
        newtime += splitedval
    else:
        newtime += splitedval

#changing the time variable to two digit of month and day due to folder creation accordigly 
timesplit = time2.split("-")
newtime2=''
for splitedval in timesplit:
    if len(newtime2) > 0:
        newtime2 += "-"
    if len(splitedval) == 1:
        splitedval = '%02d' % int(splitedval)
        #print(splitedval)
        newtime2 += splitedval
    else:
        newtime2 += splitedval

localpath = './AwsData/'+tile_name+','+newtime+','+str(aws_index)
localpath2 = './AwsData/'+tile_name2+','+newtime2+','+str(aws_index2)

"""##Calculating Spectral Indices

Spectral indices are combinations of the pixel values from two or more spectral bands in a multispectral image. Spectral indices highlight pixels showing the relative abundance or lack of a land-cover type of interest in an image. Let's looks at a couple

##Normalized Difference Vegetation Index - NVDI

The normalized difference vegetation index is a simple graphical indicator that can be used to analyze whether or not the target being observed contains live green vegetation.

It calculated as NDVI = (NIR â€“ Red) / (NIR + Red)
"""

#image 1

b4 = rasterio.open(localpath+'/B04.jp2')
b8 = rasterio.open(localpath+'/B08.jp2')

# read Red(b4) and NIR(b8) as arrays
red = b4.read()
nir = b8.read()
ndvi = (nir.astype(float)-red.astype(float))/(nir.astype(float)+red.astype(float))

#image 2

b4_2 = rasterio.open(localpath2+'/B04.jp2')
b8_2 = rasterio.open(localpath2+'/B08.jp2')

# read Red(b4) and NIR(b8) as arrays
red_2 = b4_2.read()
nir_2 = b8_2.read()
ndvi_2 = (nir_2.astype(float)-red_2.astype(float))/(nir_2.astype(float)+red_2.astype(float))

"""The [earthpy package](https://earthpy.readthedocs.io/en/latest/) allows easy plotting of visualization of bands, we use it here to visualize the Normalized Difference Vegetation index around the selected region."""

import earthpy.spatial as es
import earthpy.plot as ep

# Create figure with one plot
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(48, 24))
title = "Normalized Difference Vegetation Index (NDVI) Image 1 Time 1"
title2 = "Normalized Difference Vegetation Index (NDVI) Image 2 - Time 2"
ep.plot_bands(ndvi, cmap="RdYlGn", cols=2, title=title, vmin=-1, vmax=1,ax=ax1);
ep.plot_bands(ndvi_2, cmap="RdYlGn", cols=2, title=title2, vmin=-1, vmax=1,ax=ax2);
plt.show()

"""Now we see spectrum and realize vegetation index in the images. Lets classify these spectrum into different bins and utilize earthpy to visualize the same."""

# Create classes and apply to NDVI results
ndvi_class_bins = [-np.inf, 0, 0.1, 0.25, 0.4, np.inf]
ndvi_density_class = np.digitize(ndvi, ndvi_class_bins)

# Apply the nodata mask to the newly classified NDVI data
ndvi_density_class = np.ma.masked_where(
    np.ma.getmask(ndvi), ndvi_density_class
)
np.unique(ndvi_density_class)

# Create classes and apply to NDVI results
ndvi_density_class_2 = np.digitize(ndvi_2, ndvi_class_bins)

# Apply the nodata mask to the newly classified NDVI data
ndvi_density_class_2 = np.ma.masked_where(
    np.ma.getmask(ndvi_2), ndvi_density_class_2
)
np.unique(ndvi_density_class_2)

from matplotlib.colors import ListedColormap
# Define color map
nbr_colors = ["khaki", "y", "yellowgreen", "g", "darkgreen"]
nbr_cmap = ListedColormap(nbr_colors)

# Define class names
ndvi_cat_names = [
    "Dead forest",
    "Scrub",
    "Open Forest",
    "Moderately Dense Forest",
    "Very Dense Forest",
]

# Get list of classes
classes = np.unique(ndvi_density_class)
classes = classes.tolist()
# The mask returns a value of none in the classes. remove that
classes = classes[0:5]

# Plot your data
#fig, ax = plt.subplots(figsize=(12, 12))
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(48, 24))
im1 = ax1.imshow(np.squeeze(ndvi_density_class), cmap=nbr_cmap)
ep.draw_legend(im_ax=im1, classes=classes, titles=ndvi_cat_names)
ax1.set_title(
    "Sentinel2 - Normalized Difference Vegetation Index (NDVI) Classes",
    fontsize=14,
)

im2 = ax2.imshow(np.squeeze(ndvi_density_class_2), cmap=nbr_cmap)
ep.draw_legend(im_ax=im2, classes=classes, titles=ndvi_cat_names)
ax2.set_title(
    "Sentinel2 - Normalized Difference Vegetation Index (NDVI) Classes",
    fontsize=14,
)
ax1.set_axis_off()
ax2.set_axis_off()
plt.tight_layout()

"""The above visualization shows us the classification of deforestation  plotted for region. You can see the dense forest area in dark green and dead forest or no forest in contrasting shades.

##Clean Up (Optional)

Though we did not create any AWS billable resources as part of this exercise, the geographic and GIS data that we downloaded and the images generated may take up significant storage. Make sure to check any storage utilization and delete the files as needed.
"""
